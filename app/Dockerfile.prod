FROM python:3.9.6-alpine as infrastructure

WORKDIR /usr/src/app

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

RUN apk update \
    && apk add curl postgresql-dev gcc python3-dev musl-dev

RUN pip install --upgrade pip
#RUN pip install flake8==3.9.2
COPY . .
RUN #flake8 --ignore=E501,F401 .

# install dependencies
RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
ENV PATH "/root/.local/bin:$PATH"
RUN source $HOME/.poetry/env

#COPY ./requirements.txt .
#RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

COPY ./poetry.lock ./pyproject.toml ./
RUN $HOME/.poetry/bin/poetry config virtualenvs.create false \
    && $HOME/.poetry/bin/poetry install --no-dev --no-interaction --no-ansi

RUN $HOME/.poetry/bin/poetry install




FROM infrastructure as applcation

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq
#COPY --from=builder /usr/src/app/wheels /wheels
#COPY --from=builder /usr/src/app/requirements.txt .
#RUN pip install --no-cache /wheels/*

# copy entrypoint.prod.sh
COPY ./entrypoint.sh .
RUN chmod +x  $APP_HOME/entrypoint.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.sh"]